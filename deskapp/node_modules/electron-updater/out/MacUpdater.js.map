{"version":3,"file":"MacUpdater.js","sourceRoot":"","sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CancellationToken, configureRequestOptionsFromUrl, DigestTransform, ProgressCallbackTransform, AllPublishOptions, RequestHeaders, safeGetHeader, UpdateInfo, safeStringifyJson } from \"builder-util-runtime\"\nimport { createServer, IncomingMessage, OutgoingHttpHeaders, ServerResponse } from \"http\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, UPDATE_DOWNLOADED } from \"./main\"\nimport AutoUpdater = Electron.AutoUpdater\nimport { findFile } from \"./Provider\"\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: AllPublishOptions) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this._logger.info(`New version ${this.updateInfo!.version} has been downloaded`)\n      this.emit(UPDATE_DOWNLOADED, this.updateInfo)\n    })\n  }\n\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const files = (await this.provider).resolveFiles(updateInfo)\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw new Error(`ZIP file not provided: ${safeStringifyJson(files)}`)\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl() {\n      const address = server.address()\n      return `http://${address.address}:${address.port}`\n    }\n\n    const requestHeaders = await this.computeRequestHeaders()\n\n    return await new BluebirdPromise<Array<string>>((resolve, reject) => {\n      server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n        const requestUrl = request.url!\n        this._logger.info(`${requestUrl} requested`)\n        if (requestUrl === \"/\") {\n          const data = Buffer.from(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\n          response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\n          response.end(data)\n        }\n        else if (requestUrl.startsWith(\"/app.zip\")) {\n          let errorOccurred = false\n          response.on(\"finish\", () => {\n            try {\n              setImmediate(() => server.close())\n            }\n            finally {\n              if (!errorOccurred) {\n                this.nativeUpdater.removeListener(\"error\", reject)\n                resolve([])\n              }\n            }\n          })\n          this.doProxyUpdateFile(response, zipFileInfo.url.href, requestHeaders, zipFileInfo.info.sha512, cancellationToken, error => {\n            errorOccurred = true\n            try {\n              response.writeHead(500)\n              response.end()\n            }\n            finally {\n              this.nativeUpdater.removeListener(\"error\", reject)\n              reject(new Error(`Cannot download \"${zipFileInfo.url}\": ${error}`))\n            }\n          })\n        }\n        else {\n          this._logger.warn(`${requestUrl} requested, but not supported`)\n          response.writeHead(404)\n          response.end()\n        }\n      })\n      server.listen(0, \"127.0.0.1\", 16, () => {\n        this.nativeUpdater.setFeedURL(`${getServerUrl()}`, {\"Cache-Control\": \"no-cache\"})\n\n        this.nativeUpdater.once(\"error\", reject)\n        this.nativeUpdater.checkForUpdates()\n      })\n    })\n  }\n\n  private doProxyUpdateFile(nativeResponse: ServerResponse, url: string, headers: OutgoingHttpHeaders, sha512: string | null, cancellationToken: CancellationToken, errorHandler: (error: Error) => void) {\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptionsFromUrl(url, {headers}), downloadResponse => {\n      if (downloadResponse.statusCode! >= 400) {\n        try {\n          nativeResponse.writeHead(404)\n          nativeResponse.end()\n        }\n        finally {\n          errorHandler(new Error(`Cannot download \"${url}\", status ${downloadResponse.statusCode}: ${downloadResponse.statusMessage}`))\n        }\n        return\n      }\n\n      // in tests Electron NET Api is not used, so, we have to handle redirect.\n      const redirectUrl = safeGetHeader(downloadResponse, \"location\")\n      if (redirectUrl != null) {\n        this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n        return\n      }\n\n      const nativeHeaders: RequestHeaders = {\"Content-Type\": \"application/zip\"}\n      const streams: Array<any> = []\n      const downloadListenerCount = this.listenerCount(DOWNLOAD_PROGRESS)\n      this._logger.info(`${DOWNLOAD_PROGRESS} listener count: ${downloadListenerCount}`)\n      if (downloadListenerCount > 0) {\n        const contentLength = safeGetHeader(downloadResponse, \"content-length\")\n        this._logger.info(`contentLength: ${contentLength}`)\n        if (contentLength != null) {\n          nativeHeaders[\"Content-Length\"] = contentLength\n          streams.push(new ProgressCallbackTransform(parseInt(contentLength, 10), cancellationToken, it => this.emit(DOWNLOAD_PROGRESS, it)))\n        }\n      }\n\n      nativeResponse.writeHead(200, nativeHeaders)\n\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\n      if (sha512 != null) {\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\n      }\n\n      streams.push(nativeResponse)\n\n      let lastStream = downloadResponse\n      for (const stream of streams) {\n        stream.on(\"error\", errorHandler)\n        lastStream = lastStream.pipe(stream)\n      }\n    })\n\n    downloadRequest.on(\"error\", errorHandler)\n    downloadRequest.end()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"]}
