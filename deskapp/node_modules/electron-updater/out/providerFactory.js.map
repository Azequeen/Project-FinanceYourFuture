{"version":3,"file":"providerFactory.js","sourceRoot":"","sources":["../src/providerFactory.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAA0E,AAAwB,AAAuC,AAAM,AAAsB;;;;;;AAE5K,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB;;;;;;AACnD,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB;;;;;;AACnD,AAAO,AAAE,AAAc,AAAE,AAAM,AAAkB;;;;;;AACjD,AAAO,AAAE,AAAqB,AAAE,AAAM,AAAyB,AAE/D,AAAM;;;;sBAAuB,AAA8C,MAAE,AAAmB;AAC9F,AAAE,AAAC,QAAC,OAAO,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AAC7B,cAAM,IAAI,AAAK,MAAC,AAAyC,AAAC,AAC5D;AAAC;AAED,UAAM,AAAY,eAAG,AAAO,QAAC,AAAY;AACzC,UAAM,AAAQ,WAAG,AAAI,KAAC,AAAQ;AAC9B,AAAM,AAAC,YAAC,AAAQ,AAAC,AAAC,AAAC;AACjB,aAAK,AAAQ;AACX,kBAAM,AAAa,gBAAG,AAAqB;AAC3C,kBAAM,AAAK,QAAG,CAAC,AAAa,cAAC,AAAO,AAAC,AAAC,UAAC,AAAO,QAAC,AAAG,IAAC,AAAQ,AAAC,AAAC,WAAC,AAAI,AAAC,SAAI,AAAa,cAAC,AAAK;AAC1F,AAAE,AAAC,gBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAM,uBAAC,AAAI,AAAc,+DAAC,AAAa,eAAE,AAAO,SAAE,AAAY,AAAC,AACjE;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAM,uBAAC,AAAI,AAAqB,oFAAC,AAAa,eAAE,AAAK,OAAE,AAAY,AAAC,AACtE;AAAC;AAEH,aAAK,AAAI,AAAC;AACV,aAAK,AAAQ;AACX,AAAM;AACJ,AAAQ,0BAAE,AAAS;AACnB,AAAG,qBAAE,AAAwB,kFAAC,AAAI,AAAC;AACnC,AAAO,yBAAG,AAAsB,KAAC,AAAO,WAAI,AAAI,AACjD;AAJ0B,aAApB,AAAI,AAAe,EAIvB,AAAO,SAAE,AAAQ,aAAK,AAAQ,SAAC,AAAuE,AAAC;AAE5G,aAAK,AAAS;AACZ,AAAM,mBAAC,AAAI,AAAe,kEAAC,AAA4B,MAAE,AAAO,SAAE,AAAI,AAAC;AAEzE,aAAK,AAAS;AACZ,AAAM,mBAAC,AAAI,AAAe,kEAAC,AAAsB,MAAE,AAAY,AAAC;AAElE;AACE,kBAAM,IAAI,AAAK,AAAC,+BAAyB,AAAQ,QAAE,AAAC,AACxD,AAAC,AACH;;AAAC","sourcesContent":["import { AllPublishOptions, BaseS3Options, BintrayOptions, GenericServerOptions, getS3LikeProviderBaseUrl, GithubOptions, PublishConfiguration } from \"builder-util-runtime\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { BintrayProvider } from \"./BintrayProvider\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { GitHubProvider } from \"./GitHubProvider\"\nimport { PrivateGitHubProvider } from \"./PrivateGitHubProvider\"\n\nexport function createClient(data: PublishConfiguration | AllPublishOptions, updater: AppUpdater) {\n  if (typeof data === \"string\") {\n    throw new Error(\"Please pass PublishConfiguration object\")\n  }\n\n  const httpExecutor = updater.httpExecutor\n  const provider = data.provider\n  switch (provider) {\n    case \"github\":\n      const githubOptions = data as GithubOptions\n      const token = (githubOptions.private ? process.env.GH_TOKEN : null) || githubOptions.token\n      if (token == null) {\n        return new GitHubProvider(githubOptions, updater, httpExecutor)\n      }\n      else {\n        return new PrivateGitHubProvider(githubOptions, token, httpExecutor)\n      }\n\n    case \"s3\":\n    case \"spaces\":\n      return new GenericProvider({\n        provider: \"generic\",\n        url: getS3LikeProviderBaseUrl(data),\n        channel: (data as BaseS3Options).channel || null\n      }, updater, provider === \"spaces\" /* https://github.com/minio/minio/issues/5285#issuecomment-350428955 */)\n\n    case \"generic\":\n      return new GenericProvider(data as GenericServerOptions, updater, true)\n\n    case \"bintray\":\n      return new BintrayProvider(data as BintrayOptions, httpExecutor)\n\n    default:\n      throw new Error(`Unsupported provider: ${provider}`)\n  }\n}"]}
