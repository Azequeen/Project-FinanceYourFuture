{"version":3,"file":"PrivateGitHubProvider.js","sourceRoot":"","sources":["../src/PrivateGitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, HttpError, HttpExecutor, UpdateInfo } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { URL } from \"url\"\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\nimport { getChannelFilename, getDefaultChannelName, newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\"\nimport { getFileList } from \"./Provider\"\n\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\n  assets: Array<Asset>\n}\n\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\n  constructor(options: GithubOptions, private readonly token: string, executor: HttpExecutor<any>) {\n    super(options, \"api.github.com\", executor)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result = super.createRequestOptions(url, headers);\n    (result as any).redirect = \"manual\"\n    return result\n  }\n\n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n    const channelFile = getChannelFilename(getDefaultChannelName())\n\n    const releaseInfo = await this.getLatestVersionInfo(basePath, cancellationToken)\n    const asset = releaseInfo.assets.find(it => it.name === channelFile)\n    if (asset == null) {\n      // html_url must be always, but just to be sure\n      throw new Error(`Cannot find ${channelFile} in the release ${releaseInfo.html_url || releaseInfo.name}`)\n    }\n\n    const url = new URL(asset.url)\n    let result: any\n    try {\n      result = safeLoad((await this.httpRequest(url, this.configureHeaders(\"application/octet-stream\"), cancellationToken))!!)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${url}): ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    (result as PrivateGitHubUpdateInfo).assets = releaseInfo.assets\n    return result\n  }\n\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\n    return this.configureHeaders(\"application/octet-stream\")\n  }\n\n  private configureHeaders(accept: string) {\n    return {\n      Accept: accept,\n      Authorization: `token ${this.token}`,\n    }\n  }\n\n  private async getLatestVersionInfo(basePath: string, cancellationToken: CancellationToken): Promise<ReleaseInfo> {\n    const url = newUrlFromBase(`${basePath}/latest`, this.baseUrl)\n    try {\n      return (JSON.parse((await this.httpRequest(url, this.configureHeaders(\"application/vnd.github.v3+json\"), cancellationToken))!!))\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)\n  }\n\n  resolveFiles(updateInfo: PrivateGitHubUpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return getFileList(updateInfo).map(it => {\n      const name = path.posix.basename(it.url).replace(/ /g, \"-\")\n      const asset = updateInfo.assets.find(it => it != null && it.name === name)\n      if (asset == null) {\n        throw new Error(`Cannot find asset \"${name}\" in: ${JSON.stringify(updateInfo.assets, null, 2)}`)\n      }\n\n      return {\n        url: new URL(asset.url),\n        info: it,\n      }\n    })\n  }\n}\n\ninterface ReleaseInfo {\n  name: string\n  html_url: string\n  assets: Array<Asset>\n}\n\nexport interface Asset {\n  name: string\n  url: string\n}"]}
