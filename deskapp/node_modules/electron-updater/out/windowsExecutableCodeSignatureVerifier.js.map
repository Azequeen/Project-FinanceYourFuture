{"version":3,"file":"windowsExecutableCodeSignatureVerifier.js","sourceRoot":"","sources":["../src/windowsExecutableCodeSignatureVerifier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { execFile, execFileSync } from \"child_process\"\nimport { Logger } from \"./main\"\n\n// $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n// | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n// | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\nexport function verifySignature(publisherNames: Array<string>, tempUpdateFile: string, logger: Logger): Promise<string | null> {\n  return new BluebirdPromise<string | null>((resolve, reject) => {\n    execFile(\"powershell.exe\", [`Get-AuthenticodeSignature '${tempUpdateFile}' | ConvertTo-Json -Compress`], {\n      timeout: 60 * 1000\n    }, (error, stdout, stderr) => {\n      if (error != null || stderr) {\n        try {\n          execFileSync(\"powershell.exe\", [\"ConvertTo-Json test\"], {timeout: 10 * 1000})\n        }\n        catch (testError) {\n          logger.warn(`Cannot execute ConvertTo-Json: ${testError.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`)\n          resolve(null)\n          return\n        }\n\n        if (error != null) {\n          reject(error)\n          return\n        }\n\n        if (stderr) {\n          reject(new Error(`Cannot execute Get-AuthenticodeSignature: ${stderr}`))\n          return\n        }\n      }\n\n      const data = JSON.parse(stdout)\n      delete data.PrivateKey\n      delete data.IsOSBinary\n      delete data.SignatureType\n      const signerCertificate = data.SignerCertificate\n      if (signerCertificate != null) {\n        delete signerCertificate.Archived\n        delete signerCertificate.Extensions\n        delete signerCertificate.Handle\n        delete signerCertificate.HasPrivateKey\n        // duplicates data.SignerCertificate (contains RawData)\n        delete signerCertificate.SubjectName\n      }\n      delete data.Path\n\n      if (data.Status === 0) {\n        const name = parseDn(data.SignerCertificate.Subject).get(\"CN\")!\n        if (publisherNames.includes(name)) {\n          resolve(null)\n          return\n        }\n      }\n\n      const result = `publisherNames: ${publisherNames.join(\" | \")}, raw info: ` + JSON.stringify(data, (name, value) => name === \"RawData\" ? undefined : value, 2)\n      logger.info(`Sign verification failed, installer signed with incorrect certificate: ${result}`)\n      resolve(result)\n    })\n  })\n}\n"]}
