"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SevenZipDifferentialDownloader = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

var _blockMapApi;

function _load_blockMapApi() {
    return _blockMapApi = require("builder-util-runtime/out/blockMapApi");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _DifferentialDownloader;

function _load_DifferentialDownloader() {
    return _DifferentialDownloader = require("./DifferentialDownloader");
}

class SevenZipDifferentialDownloader extends (_DifferentialDownloader || _load_DifferentialDownloader()).DifferentialDownloader {
    constructor(packageInfo, httpExecutor, options) {
        super(packageInfo, httpExecutor, options);
    }
    download(oldBlockMapFile) {
        var _this = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            const packageInfo = _this.blockAwareFileInfo;
            const offset = packageInfo.size - packageInfo.headerSize - packageInfo.blockMapSize;
            _this.fileMetadataBuffer = yield _this.readRemoteBytes(offset, packageInfo.size - 1);
            const newBlockMap = yield (0, (_DifferentialDownloader || _load_DifferentialDownloader()).readBlockMap)(_this.fileMetadataBuffer.slice(packageInfo.headerSize));
            const oldBlockMap = yield (0, (_DifferentialDownloader || _load_DifferentialDownloader()).readBlockMap)((yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(oldBlockMapFile)));
            yield _this.doDownload(oldBlockMap, newBlockMap);
        })();
    }
    get signatureSize() {
        return (_blockMapApi || _load_blockMapApi()).SIGNATURE_HEADER_SIZE;
    }
}
exports.SevenZipDifferentialDownloader = SevenZipDifferentialDownloader; //# sourceMappingURL=SevenZipDifferentialDownloader.js.map