{"version":3,"file":"DifferentialDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/DifferentialDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { BlockMapDataHolder, configureRequestOptionsFromUrl, createHttpError, DigestTransform, HttpExecutor, safeGetHeader } from \"builder-util-runtime\"\nimport { BlockMap } from \"builder-util-runtime/out/blockMapApi\"\nimport { close, closeSync, createWriteStream, open } from \"fs-extra-p\"\nimport { IncomingMessage, OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { Writable } from \"stream\"\nimport { Logger } from \"../main\"\nimport { copyData, DataSplitter, PartListDataTask } from \"./DataSplitter\"\nimport { computeOperations, Operation, OperationKind } from \"./downloadPlanBuilder\"\n\nconst inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n\nexport class DifferentialDownloaderOptions {\n  readonly oldFile: string\n  readonly newUrl: string\n  readonly logger: Logger\n  readonly newFile: string\n\n  readonly requestHeaders: OutgoingHttpHeaders | null\n\n  readonly useMultipleRangeRequest?: boolean\n}\n\nexport abstract class DifferentialDownloader {\n  private readonly baseRequestOptions: RequestOptions\n\n  protected fileMetadataBuffer: Buffer | null\n\n  private readonly logger: Logger\n\n  constructor(protected readonly blockAwareFileInfo: BlockMapDataHolder, private readonly httpExecutor: HttpExecutor<any>, private readonly options: DifferentialDownloaderOptions) {\n    this.logger = options.logger\n    this.baseRequestOptions = configureRequestOptionsFromUrl(options.newUrl, {})\n  }\n\n  protected get signatureSize(): number {\n    return 0\n  }\n\n  private createRequestOptions(method: \"head\" | \"get\" = \"get\"): RequestOptions {\n    return {\n      ...this.baseRequestOptions,\n      method,\n      headers: {\n        ...this.options.requestHeaders,\n        Accept: \"*/*\",\n      } as any,\n    }\n  }\n\n  protected doDownload(oldBlockMap: BlockMap, newBlockMap: BlockMap) {\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\n    if (oldBlockMap.version !== newBlockMap.version) {\n      throw new Error(`version is different (${oldBlockMap.version} - ${newBlockMap.version}), full download is required`)\n    }\n\n    const logger = this.logger\n    const operations = computeOperations(oldBlockMap, newBlockMap, logger)\n    if (logger.debug != null) {\n      logger.debug(JSON.stringify(operations, null, 2))\n    }\n\n    let downloadSize = 0\n    let copySize = 0\n    for (const operation of operations) {\n      const length = operation.end - operation.start\n      if (operation.kind === OperationKind.DOWNLOAD) {\n        downloadSize += length\n      }\n      else {\n        copySize += length\n      }\n    }\n\n    const newPackageSize = this.blockAwareFileInfo.size\n    if ((downloadSize + copySize + (this.fileMetadataBuffer == null ? 0 : this.fileMetadataBuffer.length) + this.signatureSize) !== newPackageSize) {\n      throw new Error(`Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newPackageSize: ${newPackageSize}`)\n    }\n\n    logger.info(`Full: ${formatBytes(newPackageSize)}, To download: ${formatBytes(downloadSize)} (${Math.round(downloadSize / (newPackageSize / 100))}%)`)\n\n    return this.downloadFile(operations)\n  }\n\n  private async downloadFile(tasks: Array<Operation>): Promise<any> {\n    const signature = this.signatureSize === 0 ? null : await this.readRemoteBytes(0, this.signatureSize - 1)\n\n    const oldFileFd = await open(this.options.oldFile, \"r\")\n    const newFileFd = await open(this.options.newFile, \"w\")\n    const fileOut = createWriteStream(this.options.newFile, {fd: newFileFd})\n    await new BluebirdPromise((resolve, reject) => {\n      const streams: Array<any> = []\n      const digestTransform = new DigestTransform(this.blockAwareFileInfo.sha512)\n      // to simply debug, do manual validation to allow file to be fully written\n      digestTransform.isValidateOnEnd = false\n      streams.push(digestTransform)\n\n      fileOut.on(\"finish\", () => {\n        (fileOut.close as any)(() => {\n          try {\n            digestTransform.validate()\n          }\n          catch (e) {\n            reject(e)\n            return\n          }\n\n          resolve()\n        })\n      })\n\n      streams.push(fileOut)\n\n      let lastStream = null\n      for (const stream of streams) {\n        stream.on(\"error\", reject)\n        if (lastStream == null) {\n          lastStream = stream\n        }\n        else {\n          lastStream = lastStream.pipe(stream)\n        }\n      }\n\n      const firstStream = streams[0]\n\n      const w = (taskOffset: number) => {\n        if (taskOffset >= tasks.length) {\n          if (this.fileMetadataBuffer != null) {\n            firstStream.write(this.fileMetadataBuffer)\n          }\n          firstStream.end()\n          return\n        }\n\n        const nextOffset = taskOffset + (this.options.useMultipleRangeRequest === false ? 1 : 1000)\n        this.executeTasks({\n          tasks,\n          start: taskOffset,\n          end: Math.min(tasks.length, nextOffset),\n          oldFileFd,\n        }, firstStream, () => w(nextOffset), reject)\n      }\n\n      if (signature == null) {\n        w(0)\n      }\n      else {\n        firstStream.write(signature, () => w(0))\n      }\n    })\n      .then(() => {\n        return close(oldFileFd)\n      })\n      .catch(error => {\n        closeSync(oldFileFd)\n        closeSync(newFileFd)\n        throw error\n      })\n  }\n\n  private executeTasks(options: PartListDataTask, out: Writable, resolve: () => void, reject: (error: Error) => void) {\n    let ranges = \"bytes=\"\n    let partCount = 0\n    const partIndexToTaskIndex = new Map<number, number>()\n    const partIndexToLength: Array<number> = []\n    for (let i = options.start; i < options.end; i++) {\n      const task = options.tasks[i]\n      if (task.kind === OperationKind.DOWNLOAD) {\n        ranges += `${task.start}-${task.end - 1}, `\n        partIndexToTaskIndex.set(partCount, i)\n        partCount++\n        partIndexToLength.push(task.end - task.start)\n      }\n    }\n\n    if (partCount <= 1) {\n      // the only remote range - copy\n      const w = (index: number) => {\n        if (index >= options.end) {\n          resolve()\n          return\n        }\n\n        const task = options.tasks[index++]\n\n        if (task.kind === OperationKind.COPY) {\n          copyData(task, out, options.oldFileFd, reject, () => w(index))\n        }\n        else {\n          const requestOptions = this.createRequestOptions(\"get\")\n          requestOptions.headers!!.Range = `bytes=${task.start}-${task.end - 1}`\n          const request = this.httpExecutor.doRequest(requestOptions, response => {\n            if (!checkIsRangesSupported(response, reject)) {\n              return\n            }\n\n            response.pipe(out, {\n              end: false\n            })\n            response.once(\"end\", () => w(index))\n          })\n          this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n          request.end()\n        }\n      }\n\n      w(options.start)\n      return\n    }\n\n    const requestOptions = this.createRequestOptions(\"get\")\n    requestOptions.headers!!.Range = ranges.substring(0, ranges.length - 2)\n    const request = this.httpExecutor.doRequest(requestOptions, response => {\n      if (!checkIsRangesSupported(response, reject)) {\n        return\n      }\n\n      const contentType = safeGetHeader(response, \"content-type\")\n      const m = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i.exec(contentType)\n      if (m == null) {\n        reject(new Error(`Content-Type \"multipart/byteranges\" is expected, but got \"${contentType}\"`))\n        return\n      }\n\n      const dicer = new DataSplitter(out, options, partIndexToTaskIndex, m[1] || m[2], partIndexToLength, resolve)\n      dicer.on(\"error\", reject)\n      response.pipe(dicer)\n    })\n    this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n    request.end()\n  }\n\n  protected async readRemoteBytes(start: number, endInclusive: number) {\n    const buffer = Buffer.allocUnsafe((endInclusive + 1) - start)\n    const requestOptions = this.createRequestOptions()\n    requestOptions.headers!!.Range = `bytes=${start}-${endInclusive}`\n    let position = 0\n    await this.request(requestOptions, chunk => {\n      chunk.copy(buffer, position)\n      position += chunk.length\n    })\n    return buffer\n  }\n\n  private request(requestOptions: RequestOptions, dataHandler: (chunk: Buffer) => void) {\n    return new BluebirdPromise((resolve, reject) => {\n      const request = this.httpExecutor.doRequest(requestOptions, response => {\n        if (!checkIsRangesSupported(response, reject)) {\n          return\n        }\n\n        response.on(\"data\", dataHandler)\n        response.on(\"end\", () => {\n          resolve()\n        })\n      })\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n      request.end()\n    })\n  }\n}\n\nexport async function readBlockMap(data: Buffer): Promise<BlockMap> {\n  return JSON.parse((await inflateRaw(data)).toString())\n}\n\nfunction formatBytes(value: number, symbol = \" KB\") {\n  return new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) + symbol\n}\n\nfunction checkIsRangesSupported(response: IncomingMessage, reject: (error: Error) => void): boolean {\n  // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n  if (response.statusCode!! >= 400) {\n    reject(createHttpError(response))\n    return false\n  }\n\n  if (response.statusCode !== 206) {\n    const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n    if (acceptRanges == null || acceptRanges === \"none\") {\n      reject(new Error(\"Server doesn't support Accept-Ranges\"))\n      return false\n    }\n  }\n  return true\n}"]}
