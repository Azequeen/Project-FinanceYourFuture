{"version":3,"file":"SevenZipDifferentialDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/SevenZipDifferentialDownloader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAqB,AAAE,AAAM,AAAsC;;;;;;AAC5E,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAE,AAAsB,AAAiC,AAAY,AAAE,AAAM,AAA0B,AAE9G,AAAM;;;;MAAsC,AAAQ,AAAsB;AACxE,gBAAY,AAA+B,aAAE,AAA+B,cAAE,AAAsC;AAClH,AAAK,cAAC,AAAW,aAAE,AAAY,cAAE,AAAO,AAAC,AAC3C;AAAC;AAEK,AAAQ,YAAd,AAAK,CAAU,AAAuB;;;;AACpC,kBAAM,AAAW,cAAG,AAAI,MAAC,AAAqC;AAC9D,kBAAM,AAAM,SAAG,AAAW,YAAC,AAAI,OAAG,AAAW,YAAC,AAAY,aAAG,AAAW,YAAC,AAAc;AACvF,AAAI,kBAAC,AAAkB,qBAAG,MAAM,AAAI,MAAC,AAAe,gBAAC,AAAM,QAAE,AAAW,YAAC,AAAI,OAAG,AAAC,AAAC;AAClF,kBAAM,AAAW,cAAG,MAAM,AAAY,8EAAC,AAAI,MAAC,AAAkB,mBAAC,AAAK,MAAC,AAAW,YAAC,AAAY,AAAC,AAAC;AAC/F,kBAAM,AAAW,cAAG,MAAM,AAAY,+EAAC,MAAM,AAAQ,8CAAC,AAAe,AAAC,AAAC;AACvE,kBAAM,AAAI,MAAC,AAAU,WAAC,AAAW,aAAE,AAAW,AAAC,AACjD;;AAAC;AAED,QAAc,AAAa;AACzB,AAAM,AAAC,AAAqB,AAC9B;AAAC,AACF","sourcesContent":["import { BlockMapDataHolder, HttpExecutor, PackageFileInfo } from \"builder-util-runtime\"\nimport { SIGNATURE_HEADER_SIZE } from \"builder-util-runtime/out/blockMapApi\"\nimport { readFile } from \"fs-extra-p\"\nimport { DifferentialDownloader, DifferentialDownloaderOptions, readBlockMap } from \"./DifferentialDownloader\"\n\nexport class SevenZipDifferentialDownloader extends DifferentialDownloader {\n  constructor(packageInfo: BlockMapDataHolder, httpExecutor: HttpExecutor<any>, options: DifferentialDownloaderOptions) {\n    super(packageInfo, httpExecutor, options)\n  }\n\n  async download(oldBlockMapFile: string) {\n    const packageInfo = this.blockAwareFileInfo as PackageFileInfo\n    const offset = packageInfo.size - packageInfo.headerSize!! - packageInfo.blockMapSize!!\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, packageInfo.size - 1)\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(packageInfo.headerSize!!))\n    const oldBlockMap = await readBlockMap(await readFile(oldBlockMapFile))\n    await this.doDownload(oldBlockMap, newBlockMap)\n  }\n\n  protected get signatureSize() {\n    return SIGNATURE_HEADER_SIZE\n  }\n}"]}
