{"version":3,"file":"DataSplitter.js","sourceRoot":"","sources":["../../src/differentialDownloader/DataSplitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Writable } from \"stream\"\nimport { Operation, OperationKind } from \"./downloadPlanBuilder\"\nimport { createReadStream } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst\"\n\nconst DOUBLE_CRLF = Buffer.from(\"\\r\\n\\r\\n\")\n\nenum ReadState {\n  INIT, HEADER, BODY\n}\n\nexport interface PartListDataTask {\n  readonly oldFileFd: number\n  readonly tasks: Array<Operation>\n  readonly start: number\n  readonly end: number\n}\n\nexport function copyData(task: Operation, out: Writable, oldFileFd: number, reject: (error: Error) => void, resolve: () => void) {\n  const readStream = createReadStream(\"\", {\n    fd: oldFileFd,\n    autoClose: false,\n    start: task.start,\n    // end is inclusive\n    end: task.end - 1,\n  })\n  readStream.on(\"error\", reject)\n  readStream.once(\"end\", resolve)\n  readStream.pipe(out, {\n    end: false\n  })\n}\n\nexport class DataSplitter extends Writable {\n  partIndex = -1\n\n  private headerListBuffer: Buffer | null = null\n  private readState = ReadState.INIT\n  private ignoreByteCount = 0\n  private remainingPartDataCount = 0\n\n  private readonly boundaryLength: number\n\n  constructor(private readonly out: Writable, private readonly options: PartListDataTask, private readonly partIndexToTaskIndex: Map<number, number>, boundary: string, private readonly partIndexToLength: Array<number>, private readonly finishHandler: () => any) {\n    super()\n\n    this.boundaryLength = boundary.length + 4 /* size of \\r\\n-- */\n    // first chunk doesn't start with \\r\\n\n    this.ignoreByteCount = this.boundaryLength - 2\n  }\n\n  get isFinished() {\n    return this.partIndex === this.partIndexToLength.length\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  _write(data: Buffer, encoding: string, callback: (error?: Error) => void) {\n    if (this.isFinished) {\n      console.error(`Trailing ignored data: ${data.length} bytes`)\n      return\n    }\n\n    this.handleData(data)\n      .then(callback)\n      .catch(callback)\n  }\n\n  private async handleData(chunk: Buffer): Promise<undefined> {\n    let start = 0\n\n    if (this.ignoreByteCount !== 0 && this.remainingPartDataCount !== 0) {\n      throw new Error(\"Internal error\")\n    }\n\n    if (this.ignoreByteCount > 0) {\n      const toIgnore = Math.min(this.ignoreByteCount, chunk.length)\n      this.ignoreByteCount -= toIgnore\n      start = toIgnore\n    }\n    else if (this.remainingPartDataCount > 0) {\n      const toRead = Math.min(this.remainingPartDataCount, chunk.length)\n      this.remainingPartDataCount -= toRead\n      await this.processPartData(chunk, 0, toRead)\n      start = toRead\n    }\n\n    if (start === chunk.length) {\n      return\n    }\n\n    if (this.readState === ReadState.HEADER) {\n      const headerListEnd = this.searchHeaderListEnd(chunk, start)\n      if (headerListEnd === -1) {\n        return\n      }\n\n      start = headerListEnd\n      this.readState = ReadState.BODY\n      // header list is ignored, we don't need it\n      this.headerListBuffer = null\n    }\n\n    while (true) {\n      if (this.readState === ReadState.BODY) {\n        this.readState = ReadState.INIT\n      }\n      else {\n        this.partIndex++\n\n        let taskIndex = this.partIndexToTaskIndex.get(this.partIndex)\n        if (taskIndex == null) {\n          if (this.isFinished) {\n            taskIndex = this.options.end\n          }\n          else {\n            throw new Error(\"taskIndex is null\")\n          }\n        }\n\n        const prevTaskIndex = this.partIndex === 0 ? this.options.start : (this.partIndexToTaskIndex.get(this.partIndex - 1)!! + 1 /* prev part is download, next maybe copy */)\n        if (prevTaskIndex < taskIndex) {\n          await this.copyExistingData(prevTaskIndex, taskIndex)\n        }\n        else if (prevTaskIndex > taskIndex) {\n          throw new Error(\"prevTaskIndex must be < taskIndex\")\n        }\n\n        if (this.isFinished) {\n          this.onPartEnd()\n          this.finishHandler()\n          return\n        }\n\n        start = this.searchHeaderListEnd(chunk, start)\n\n        if (start === -1) {\n          this.readState = ReadState.HEADER\n          return\n        }\n      }\n\n      const partLength = this.partIndexToLength[this.partIndex]\n      const end = start + partLength\n      const effectiveEnd = Math.min(end, chunk.length)\n      await this.processPartStarted(chunk, start, effectiveEnd)\n      this.remainingPartDataCount = partLength - (effectiveEnd - start)\n      if (this.remainingPartDataCount > 0) {\n        return\n      }\n\n      start = end + this.boundaryLength\n      if (start >= chunk.length) {\n        this.ignoreByteCount = this.boundaryLength - (chunk.length - end)\n        return\n      }\n    }\n  }\n\n  private copyExistingData(index: number, end: number) {\n    return new BluebirdPromise((resolve, reject) => {\n      const w = () => {\n        if (index === end) {\n          resolve()\n          return\n        }\n\n        const task = this.options.tasks[index]\n        if (task.kind !== OperationKind.COPY) {\n          reject(new Error(\"Task kind must be COPY\"))\n          return\n        }\n\n        copyData(task, this.out, this.options.oldFileFd, reject, () => {\n          index++\n          w()\n        })\n      }\n      w()\n    })\n  }\n\n  private searchHeaderListEnd(chunk: Buffer, readOffset: number): number {\n    const headerListEnd = chunk.indexOf(DOUBLE_CRLF, readOffset)\n    if (headerListEnd !== -1) {\n      return headerListEnd + DOUBLE_CRLF.length\n    }\n\n    // not all headers data were received, save to buffer\n    const partialChunk = readOffset === 0 ? chunk : chunk.slice(readOffset)\n    if (this.headerListBuffer == null) {\n      this.headerListBuffer = partialChunk\n    }\n    else {\n      this.headerListBuffer = Buffer.concat([this.headerListBuffer, partialChunk])\n    }\n    return -1\n  }\n\n  private actualPartLength = 0\n\n  private onPartEnd() {\n    const expectedLength = this.partIndexToLength[this.partIndex - 1]\n    if (this.actualPartLength !== expectedLength) {\n      throw new Error(`Expected length: ${expectedLength} differs from actual: ${this.actualPartLength}`)\n    }\n    this.actualPartLength = 0\n  }\n\n  private processPartStarted(data: Buffer, start: number, end: number): Promise<void> {\n    if (this.partIndex !== 0) {\n      this.onPartEnd()\n    }\n    return this.processPartData(data, start, end)\n  }\n\n  private processPartData(data: Buffer, start: number, end: number): Promise<void> {\n    this.actualPartLength += end - start\n    const out = this.out\n    if (out.write(start === 0 && data.length === end ? data : data.slice(start, end))) {\n      return BluebirdPromise.resolve()\n    }\n    else {\n      return new BluebirdPromise((resolve, reject) => {\n        out.on(\"error\", reject)\n        out.once(\"drain\", () => {\n          out.removeListener(\"error\", reject)\n          resolve()\n        })\n      })\n    }\n  }\n}"]}
