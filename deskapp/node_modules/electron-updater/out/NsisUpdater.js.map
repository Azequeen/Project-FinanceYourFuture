{"version":3,"file":"NsisUpdater.js","sourceRoot":"","sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, DownloadOptions, PackageFileInfo, UpdateInfo } from \"builder-util-runtime\"\nimport { BLOCK_MAP_FILE_NAME } from \"builder-util-runtime/out/blockMapApi\"\nimport { spawn } from \"child_process\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport { BaseUpdater } from \"./BaseUpdater\"\nimport { GenericDifferentialDownloader } from \"./differentialDownloader/GenericDifferentialDownloader\"\nimport { SevenZipDifferentialDownloader } from \"./differentialDownloader/SevenZipDifferentialDownloader\"\nimport { newUrlFromBase, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED } from \"./main\"\nimport { findFile, Provider } from \"./Provider\"\nimport { verifySignature } from \"./windowsExecutableCodeSignatureVerifier\"\n\nexport class NsisUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const provider = await this.provider\n    const fileInfo = findFile(provider.resolveFiles(updateInfo), \"exe\")!!\n    const requestHeaders = await this.computeRequestHeaders()\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: requestHeaders,\n      cancellationToken,\n      sha512: fileInfo.info.sha512,\n    }\n\n    let packagePath: string | null = this.downloadedUpdateHelper.packagePath\n\n    let installerPath = this.downloadedUpdateHelper.getDownloadedFile(updateInfo, fileInfo)\n    if (installerPath != null) {\n      return packagePath == null ? [installerPath] : [installerPath, packagePath]\n    }\n\n    await this.executeDownload(downloadOptions, fileInfo, async (tempDir, destinationFile, removeTempDirIfAny) => {\n      installerPath = destinationFile\n      if (await this.differentialDownloadInstaller(fileInfo, \"OLD\", installerPath, requestHeaders, provider)) {\n        await this.httpExecutor.download(fileInfo.url.href, installerPath, downloadOptions)\n      }\n\n      const signatureVerificationStatus = await this.verifySignature(installerPath)\n      if (signatureVerificationStatus != null) {\n        await removeTempDirIfAny()\n        // noinspection ThrowInsideFinallyBlockJS\n        throw new Error(`New version ${this.updateInfo!.version} is not signed by the application owner: ${signatureVerificationStatus}`)\n      }\n\n      const packageInfo = fileInfo.packageInfo\n      if (packageInfo != null) {\n        packagePath = path.join(tempDir, `package-${updateInfo.version}${path.extname(packageInfo.path) || \".7z\"}`)\n        if (await this.differentialDownloadWebPackage(packageInfo, packagePath, provider)) {\n          await this.httpExecutor.download(packageInfo.path, packagePath!!, {\n            skipDirCreation: true,\n            headers: requestHeaders,\n            cancellationToken,\n            sha512: packageInfo.sha512,\n          })\n        }\n      }\n    })\n\n    this.downloadedUpdateHelper.setDownloadedFile(installerPath!!, packagePath, updateInfo, fileInfo)\n    this.addQuitHandler()\n    this.emit(UPDATE_DOWNLOADED, this.updateInfo)\n    return packagePath == null ? [installerPath!!] : [installerPath!!, packagePath]\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(tempUpdateFile: string): Promise<string | null> {\n    let publisherName: Array<string> | string | null\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName\n      if (publisherName == null) {\n        return null\n      }\n    }\n    catch (e) {\n      if (e.code === \"ENOENT\") {\n        // no app-update.yml\n        return null\n      }\n      throw e\n    }\n    return await verifySignature(Array.isArray(publisherName) ? publisherName : [publisherName], tempUpdateFile, this._logger)\n  }\n\n  protected doInstall(installerPath: string, isSilent: boolean, isForceRunAfter: boolean): boolean {\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n\n    if (isForceRunAfter) {\n      args.push(\"--force-run\")\n    }\n\n    const packagePath = this.downloadedUpdateHelper.packagePath\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=${packagePath}`)\n    }\n\n    const spawnOptions = {\n      detached: true,\n      stdio: \"ignore\",\n    }\n\n    try {\n      spawn(installerPath, args, spawnOptions)\n        .unref()\n    }\n    catch (e) {\n      // yes, such errors dispatched not as error event\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      if ((e as any).code === \"UNKNOWN\" || (e as any).code === \"EACCES\") { // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n        this._logger.info(\"Access denied or UNKNOWN error code on spawn, will be executed again using elevate\")\n        try {\n          spawn(path.join(process.resourcesPath!, \"elevate.exe\"), [installerPath].concat(args), spawnOptions)\n            .unref()\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      }\n      else {\n        this.dispatchError(e)\n      }\n    }\n\n    return true\n  }\n\n  private async differentialDownloadInstaller(fileInfo: ResolvedUpdateFileInfo, oldFile: string, installerPath: string, requestHeaders: OutgoingHttpHeaders, provider: Provider<any>) {\n    if (process.env.__NSIS_DIFFERENTIAL_UPDATE__ == null) {\n      return true\n    }\n\n    try {\n      const blockMapData = JSON.parse((await provider.httpRequest(newUrlFromBase(`${fileInfo.url.pathname}.blockMap.json`, fileInfo.url)))!!)\n      await new GenericDifferentialDownloader(fileInfo.info, this.httpExecutor, {\n        newUrl: fileInfo.url.href,\n        oldFile,\n        logger: this._logger,\n        newFile: installerPath,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n        requestHeaders,\n      })\n        .download(blockMapData)\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      // during test (developer machine mac) we must throw error\n      return process.platform === \"win32\"\n    }\n\n    return false\n  }\n\n  private async differentialDownloadWebPackage(packageInfo: PackageFileInfo, packagePath: string, provider: Provider<any>): Promise<boolean> {\n    if (packageInfo.blockMapSize == null || packageInfo.headerSize == null) {\n      return true\n    }\n\n    try {\n      await new SevenZipDifferentialDownloader(packageInfo, this.httpExecutor, {\n        newUrl: packageInfo.path,\n        oldFile: path.join(process.resourcesPath!, \"..\", \"package.7z\"),\n        logger: this._logger,\n        newFile: packagePath,\n        requestHeaders: this.requestHeaders,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n      })\n        .download(path.join(process.resourcesPath!, \"..\", BLOCK_MAP_FILE_NAME))\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      // during test (developer machine mac or linux) we must throw error\n      return process.platform === \"win32\"\n    }\n    return false\n  }\n}"]}
