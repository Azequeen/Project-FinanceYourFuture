{"version":3,"file":"electronHttpExecutor.js","sourceRoot":"","sources":["../src/electronHttpExecutor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAA8B,AAAmB,AAAY,AAAE,AAAM,AAAsB;;;;;;AACpG,AAAO,AAAE,AAAG,AAAE,AAAM,AAAU;;;;;;AAC9B,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACtC,AAAO,AAAK,AAAI,AAAM,AAAM,AAI5B,AAAM;;;;MAA4B,AAAQ,AAAoC;AAC5E,gBAA6B,AAAqE;AAChG,AAAK,AAAE;AADoB,aAAkB,qBAAlB,AAAkB,AAAmD,AAElG;AAAC;AAEK,AAAQ,YAAd,AAAK,CAAU,AAAW,KAAE,AAAmB,aAAE,AAAwB;;;;AACvE,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,QAAI,CAAC,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAC;AAChD,sBAAM,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAW,AAAC,AAAC,AAC5C;AAAC;AAED,AAAM,mBAAC,cAAc,AAAiB,kBAAC,AAAa,cAAS,UAAC,AAAO,SAAE,AAAM,QAAE,AAAQ,AAAE,AAAE;AACzF,AAAI,sBAAC,AAAU,qHACqB,AAAG;AACnC,AAAO,6BAAE,AAAO,QAAC,AAAO,WAAI,AAAS,AACtC,AAAC;AAFqC,iBAApC,AAA8B,KAGjC,AAAQ,UAAE,AAAQ,aACjB,AAAW,aAAE,AAAC,GAAE,AAAO,SAAE,AAAK,AAAC,AAAE;AAClC,AAAE,AAAC,wBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAO,gCAAC,AAAW,AAAC,AACtB;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAM,+BAAC,AAAK,AAAC,AACf;AAAC,AACH;AAAC,mBAAE,AAAQ,AAAC,AACd;AAAC,AAAC,AACJ,aAfe,AAAO;;AAerB;AAEM,AAAS,cAAC,AAAY,SAAE,AAAiC;AAC9D,cAAM,AAAO,UAAG,AAAG,oCAAC,AAAO,QAAC,AAAO,AAAC;AACpC,AAAO,gBAAC,AAAE,GAAC,AAAU,YAAE,AAAQ,AAAC;AAChC,AAAI,aAAC,AAAoB,qBAAC,AAAO,AAAC;AAClC,AAAM,eAAC,AAAO,AAChB;AAAC;AAEO,AAAoB,yBAAC,AAA+B;AAC1D,AAAE,AAAC,YAAC,AAAI,KAAC,AAAkB,sBAAI,AAAI,AAAC,MAAC,AAAC;AACpC,AAAO,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAI,KAAC,AAAkB,AAAC,AAC9C;AAAC,AACH;AAAC,AACF","sourcesContent":["import { configureRequestOptionsFromUrl, DownloadOptions, HttpExecutor } from \"builder-util-runtime\"\nimport { net } from \"electron\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nexport type LoginCallback = (username: string, password: string) => void\n\nexport class ElectronHttpExecutor extends HttpExecutor<Electron.ClientRequest> {\n  constructor(private readonly proxyLoginCallback?: (authInfo: any, callback: LoginCallback) => void) {\n    super()\n  }\n\n  async download(url: string, destination: string, options: DownloadOptions): Promise<string> {\n    if (options == null || !options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\n      this.doDownload({\n        ...configureRequestOptionsFromUrl(url, {\n          headers: options.headers || undefined,\n        }),\n        redirect: \"manual\",\n      }, destination, 0, options, error => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      }, onCancel)\n    })\n  }\n\n  public doRequest(options: any, callback: (response: any) => void): any {\n    const request = net.request(options)\n    request.on(\"response\", callback)\n    this.addProxyLoginHandler(request)\n    return request\n  }\n\n  private addProxyLoginHandler(request: Electron.ClientRequest) {\n    if (this.proxyLoginCallback != null) {\n      request.on(\"login\", this.proxyLoginCallback)\n    }\n  }\n}"]}
