{"version":3,"file":"BaseUpdater.js","sourceRoot":"","sources":["../src/BaseUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationError, DownloadOptions } from \"builder-util-runtime\"\nimport { mkdtemp, remove } from \"fs-extra-p\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\nimport { DOWNLOAD_PROGRESS, ResolvedUpdateFileInfo } from \"./main\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected readonly downloadedUpdateHelper = new DownloadedUpdateHelper()\n\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): void {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    if (this.install(isSilent, isSilent ? isForceRunAfter : true)) {\n      setImmediate(() => {\n        this.app.quit()\n      })\n    }\n  }\n\n  protected async executeDownload(downloadOptions: DownloadOptions, fileInfo: ResolvedUpdateFileInfo, task: (tempDir: string, destinationFile: string, removeTempDirIfAny: () => Promise<any>) => Promise<any>) {\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    // use TEST_APP_TMP_DIR if defined and developer machine (must be not windows due to security reasons - we must not use env var in the production)\n    const tempDir = await mkdtemp(`${path.join((process.platform === \"darwin\" ? process.env.TEST_APP_TMP_DIR : null) || tmpdir(), \"up\")}-`)\n\n    const removeTempDirIfAny = () => {\n      this.downloadedUpdateHelper.clear()\n      return remove(tempDir)\n        .catch(() => {\n          // ignored\n        })\n    }\n\n    try {\n      const destinationFile = path.join(tempDir, path.posix.basename(fileInfo.url.pathname))\n      await task(tempDir, destinationFile, removeTempDirIfAny)\n\n      this._logger.info(`New version ${this.updateInfo!.version} has been downloaded to ${destinationFile}`)\n    }\n    catch (e) {\n      await removeTempDirIfAny()\n\n      if (e instanceof CancellationError) {\n        this.emit(\"update-cancelled\", this.updateInfo)\n        this._logger.info(\"Cancelled\")\n      }\n      throw e\n    }\n  }\n\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  protected install(isSilent: boolean, isRunAfter: boolean): boolean {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    if (!this.updateAvailable || installerPath == null) {\n      this.dispatchError(new Error(\"No update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.once(\"quit\", () => {\n      if (!this.quitAndInstallCalled) {\n        this._logger.info(\"Auto install update on quit\")\n        this.install(true, false)\n      }\n    })\n  }\n}"]}
