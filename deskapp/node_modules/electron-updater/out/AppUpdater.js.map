{"version":3,"file":"AppUpdater.js","sourceRoot":"","sources":["../src/AppUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AllPublishOptions, asArray, CancellationToken, PublishConfiguration, UpdateInfo, UUID } from \"builder-util-runtime\"\nimport { randomBytes } from \"crypto\"\nimport { Notification } from \"electron\"\nimport isDev from \"electron-is-dev\"\nimport { EventEmitter } from \"events\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { eq as isVersionsEqual, gt as isVersionGreaterThan, prerelease as getVersionPreleaseComponents, valid as parseVersion } from \"semver\"\nimport \"source-map-support/register\"\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { Logger, Provider, UpdateCheckResult, UpdaterSignal } from \"./main\"\nimport { createClient } from \"./providerFactory\"\n\nexport abstract class AppUpdater extends EventEmitter {\n  /**\n   * Whether to automatically download an update when it is found.\n   */\n  autoDownload = true\n\n  /**\n   * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n   *\n   * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\n   */\n  allowPrerelease = false\n\n  /**\n   * *GitHub provider only.* Get all release notes (from current version to latest), not just the latest.\n   * @default false\n   */\n  fullChangelog = false\n\n  /**\n   * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n   * @default false\n   */\n  allowDowngrade = false\n\n  /**\n   * The current application version.\n   */\n  readonly currentVersion: string\n\n  private _channel: string | null = null\n\n  /**\n   * Get the update channel. Not applicable for GitHub. Doesn't return `channel` from the update configuration, only if was previously set.\n   */\n  get channel(): string | null {\n    return this._channel\n  }\n\n  /**\n   * Set the update channel. Not applicable for GitHub. Overrides `channel` in the update configuration.\n   *\n   * `allowDowngrade` will be automatically set to `true`. If this behavior is not suitable for you, simple set `allowDowngrade` explicitly after.\n   */\n  set channel(value: string | null) {\n    if (this._channel != null) {\n      if (typeof value !== \"string\") {\n        throw new Error(`Channel must be a string, but got: ${value}`)\n      }\n      else if (value.length === 0) {\n        throw new Error(`Channel must be not an empty string`)\n      }\n    }\n\n    this._channel = value\n    this.allowDowngrade = true\n  }\n\n  /**\n   *  The request headers.\n   */\n  requestHeaders: OutgoingHttpHeaders | null\n\n  protected _logger: Logger = console\n\n  /**\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n   * Set it to `null` if you would like to disable a logging feature.\n   */\n  get logger(): Logger | null {\n    return this._logger\n  }\n\n  set logger(value: Logger | null) {\n    this._logger = value == null ? new NoOpLogger() : value\n  }\n\n  /**\n   * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\n   */\n  readonly signals = new UpdaterSignal(this)\n\n  private _appUpdateConfigPath: string | null\n\n  /**\n   * test only\n   * @private\n   */\n  set updateConfigPath(value: string | null) {\n    this.clientPromise = null\n    this._appUpdateConfigPath = value\n    this.configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n  }\n\n  protected updateAvailable = false\n\n  private clientPromise: Promise<Provider<any>> | null\n\n  protected get provider(): Promise<Provider<any>> {\n    return this.clientPromise!!\n  }\n\n  protected readonly stagingUserIdPromise = new Lazy<string>(() => this.getOrCreateStagingUserId())\n\n  // public, allow to read old config for anyone\n  configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n\n  private readonly untilAppReady: Promise<any>\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null\n\n  protected readonly app: Electron.App\n\n  protected updateInfo: UpdateInfo | null\n\n  /** @internal */\n  readonly httpExecutor: ElectronHttpExecutor\n\n  constructor(options: AllPublishOptions | null | undefined, app?: any) {\n    super()\n\n    this.on(\"error\", (error: Error) => {\n      this._logger.error(`Error: ${error.stack || error.message}`)\n    })\n\n    if (app != null || (global as any).__test_app != null) {\n      this.app = app || (global as any).__test_app\n      this.untilAppReady = BluebirdPromise.resolve()\n    }\n    else {\n      this.app = require(\"electron\").app\n      this.httpExecutor = new ElectronHttpExecutor((authInfo, callback) => this.emit(\"login\", authInfo, callback))\n      this.untilAppReady = new BluebirdPromise(resolve => {\n        if (this.app.isReady()) {\n          resolve()\n        }\n        else {\n          this.app.on(\"ready\", resolve)\n        }\n      })\n    }\n\n    const currentVersionString = this.app.getVersion()\n    const currentVersion = parseVersion(currentVersionString)\n    if (currentVersion == null) {\n      throw new Error(`App version is not a valid semver version: \"${currentVersionString}`)\n    }\n    this.currentVersion = currentVersion\n\n    this.allowPrerelease = hasPrereleaseComponents(this.currentVersion)\n\n    if (options != null) {\n      this.setFeedURL(options)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n  getFeedURL(): string | null | undefined {\n    return \"Deprecated. Do not use it.\"\n  }\n\n  /**\n   * Configure update provider. If value is `string`, [GenericServerOptions](/configuration/publish.md#genericserveroptions) will be set with value as `url`.\n   * @param options If you want to override configuration in the `app-update.yml`.\n   */\n  setFeedURL(options: PublishConfiguration | AllPublishOptions) {\n    // https://github.com/electron-userland/electron-builder/issues/1105\n    let provider: Provider<any>\n    if (typeof options === \"string\") {\n      provider = new GenericProvider({provider: \"generic\", url: options}, this)\n    }\n    else {\n      provider = createClient(options, this)\n    }\n    this.clientPromise = Promise.resolve(provider)\n  }\n\n  /**\n   * Asks the server whether there is an update.\n   */\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\n    if (checkForUpdatesPromise != null) {\n      return checkForUpdatesPromise\n    }\n\n    checkForUpdatesPromise = this._checkForUpdates()\n    this.checkForUpdatesPromise = checkForUpdatesPromise\n    const nullizePromise = () => this.checkForUpdatesPromise = null\n    checkForUpdatesPromise\n      .then(nullizePromise)\n      .catch(nullizePromise)\n    return checkForUpdatesPromise\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return BluebirdPromise.resolve(null)\n    }\n\n    this.signals.updateDownloaded(it => {\n      new Notification({\n        title: \"A new update is ready to install\",\n        body: `${this.app.getName()} version ${it.version} is downloaded and will be automatically installed on exit`\n      }).show()\n    })\n    return this.checkForUpdates()\n  }\n\n  private async isStagingMatch(updateInfo: UpdateInfo): Promise<boolean> {\n    const rawStagingPercentage = updateInfo.stagingPercentage\n    let stagingPercentage = rawStagingPercentage\n    if (stagingPercentage == null) {\n      return true\n    }\n\n    stagingPercentage = parseInt(stagingPercentage as any, 10)\n    if (isNaN(stagingPercentage)) {\n      this._logger.warn(`Staging percentage is NaN: ${rawStagingPercentage}`)\n      return true\n    }\n\n    // convert from user 0-100 to internal 0-1\n    stagingPercentage = stagingPercentage / 100\n\n    const stagingUserId = await this.stagingUserIdPromise.value\n    const val = UUID.parse(stagingUserId).readUInt32BE(12)\n    const percentage = (val / 0xFFFFFFFF)\n    this._logger.info(`Staging percentage: ${stagingPercentage}, percentage: ${percentage}, user id: ${stagingUserId}`)\n    return percentage < stagingPercentage\n  }\n\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\n    try {\n      await this.untilAppReady\n      this._logger.info(\"Checking for update\")\n      this.emit(\"checking-for-update\")\n      return await this.doCheckForUpdates()\n    }\n    catch (e) {\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\n      throw e\n    }\n  }\n\n  private computeFinalHeaders(headers: OutgoingHttpHeaders) {\n    if (this.requestHeaders != null) {\n      Object.assign(headers, this.requestHeaders)\n    }\n    return headers\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    if (this.clientPromise == null) {\n      this.clientPromise = this.configOnDisk.value.then(it => createClient(it, this))\n    }\n\n    const client = await this.clientPromise\n    const stagingUserId = await this.stagingUserIdPromise.value\n    client.setRequestHeaders(this.computeFinalHeaders({\"X-User-Staging-Id\": stagingUserId}))\n    const updateInfo = await client.getLatestVersion()\n\n    const latestVersion = parseVersion(updateInfo.version)\n    if (latestVersion == null) {\n      throw new Error(`Latest version (from update server) is not valid semver version: \"${latestVersion}`)\n    }\n\n    const isStagingMatch = await this.isStagingMatch(updateInfo)\n    if (!isStagingMatch || (this.allowDowngrade && !hasPrereleaseComponents(latestVersion) ? isVersionsEqual(latestVersion, this.currentVersion) : !isVersionGreaterThan(latestVersion, this.currentVersion))) {\n      this.updateAvailable = false\n      this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${updateInfo.version}, downgrade is ${this.allowDowngrade ? \"allowed\" : \"disallowed\"}.`)\n      this.emit(\"update-not-available\", updateInfo)\n      return {\n        versionInfo: updateInfo,\n        updateInfo,\n      }\n    }\n\n    this.updateAvailable = true\n    this.updateInfo = updateInfo\n\n    this.onUpdateAvailable(updateInfo)\n\n    const cancellationToken = new CancellationToken()\n    //noinspection ES6MissingAwait\n    return {\n      versionInfo: updateInfo,\n      updateInfo,\n      cancellationToken,\n      downloadPromise: this.autoDownload ? this.downloadUpdate(cancellationToken) : null,\n    }\n  }\n\n  protected onUpdateAvailable(updateInfo: UpdateInfo) {\n    this._logger.info(`Found version ${updateInfo.version} (url: ${asArray(updateInfo.files).map(it => it.url).join(\", \")})`)\n    this.emit(\"update-available\", updateInfo)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  async downloadUpdate(cancellationToken: CancellationToken = new CancellationToken()): Promise<any> {\n    const updateInfo = this.updateInfo\n    if (updateInfo == null) {\n      const error = new Error(\"Please check update first\")\n      this.dispatchError(error)\n      throw error\n    }\n\n    this._logger.info(`Downloading update from ${asArray(updateInfo.files).map(it => it.url).join(\", \")}`)\n\n    try {\n      return await this.doDownloadUpdate(updateInfo, cancellationToken)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      throw e\n    }\n  }\n\n  protected dispatchError(e: Error) {\n    this.emit(\"error\", e, (e.stack || e).toString())\n  }\n\n  protected async abstract doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>>\n\n  /**\n   * Restarts the app and installs the update after it has been downloaded.\n   * It should only be called after `update-downloaded` has been emitted.\n   *\n   * **Note:** `autoUpdater.quitAndInstall()` will close all application windows first and only emit `before-quit` event on `app` after that.\n   * This is different from the normal quit event sequence.\n   *\n   * @param isSilent *windows-only* Runs the installer in silent mode. Defaults to `false`.\n   * @param isForceRunAfter Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.\n   */\n  abstract quitAndInstall(isSilent?: boolean, isForceRunAfter?: boolean): void\n\n  private async loadUpdateConfig() {\n    if (this._appUpdateConfigPath == null) {\n      this._appUpdateConfigPath = isDev ? path.join(this.app.getAppPath(), \"dev-app-update.yml\") : path.join(process.resourcesPath!, \"app-update.yml\")\n    }\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\n  }\n\n  /*** @private */\n  protected async computeRequestHeaders(): Promise<OutgoingHttpHeaders> {\n    const fileExtraDownloadHeaders = (await this.provider).fileExtraDownloadHeaders\n    if (fileExtraDownloadHeaders != null) {\n      const requestHeaders = this.requestHeaders\n      return requestHeaders == null ? fileExtraDownloadHeaders : {\n        ...fileExtraDownloadHeaders,\n        ...requestHeaders,\n      }\n    }\n    return this.computeFinalHeaders({Accept: \"*/*\"})\n  }\n\n  private async getOrCreateStagingUserId(): Promise<string> {\n    const file = path.join(this.app.getPath(\"userData\"), \".updaterId\")\n    try {\n      const id = await readFile(file, \"utf-8\")\n      if (UUID.check(id)) {\n        return id\n      }\n      else {\n        this._logger.warn(`Staging user id file exists, but content was invalid: ${id}`)\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)\n      }\n    }\n\n    const id = UUID.v5(randomBytes(4096), UUID.OID)\n    this._logger.info(`Generated new staging user ID: ${id}`)\n    try {\n      await outputFile(file, id)\n    }\n    catch (e) {\n      this._logger.warn(`Couldn't write out staging user ID: ${e}`)\n    }\n    return id\n  }\n}\n\nfunction hasPrereleaseComponents(version: string) {\n  const versionPrereleaseComponent = getVersionPreleaseComponents(version)\n  return versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0\n}\n\n/** @private */\nexport class NoOpLogger implements Logger {\n  info(message?: any) {\n    // ignore\n  }\n\n  warn(message?: any) {\n    // ignore\n  }\n\n  error(message?: any) {\n    // ignore\n  }\n}\n"]}
