{"version":3,"file":"BintrayProvider.js","sourceRoot":"","sources":["../src/BintrayProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAkB,AAAiB,AAA4B,AAAM,AAAsB;;;;;;AAClG,AAAO,AAAE,AAAa,AAAE,AAAM,AAAkC;;;;;;AAChE,AAAO,AAAE,AAAG,AAAE,AAAM,AAAK;;;;;;AACzB,AAAO,AAAE,AAAkB,AAAE,AAAqB,AAAE,AAAU,AAAE,AAAQ,AAA0B,AAAM,AAAQ;;;;;;AAChH,AAAO,AAAE,AAAe,AAAE,AAAY,AAAE,AAAM,AAAY,AAE1D,AAAM;;;;MAAuB,AAAQ,AAAoB;AAIvD,gBAAY,AAA6B,eAAE,AAA+B;AACxE,AAAK,cAAC,AAAY,AAAC;AAEnB,AAAI,aAAC,AAAM,SAAG,AAAI,AAAa,gDAAC,AAAa,eAAE,AAAY,cAAE,AAAI,AAAiB,AAAE,AAAC;AACrF,AAAI,aAAC,AAAO,UAAG,AAAU,AAAC,kEAA0B,AAAI,KAAC,AAAM,OAAC,AAAK,SAAI,AAAI,KAAC,AAAM,OAAC,AAAI,IAAE,AAAC,AAC9F;AAAC;AAED,AAAiB,sBAAC,AAAU;AAC1B,AAAK,cAAC,AAAiB,kBAAC,AAAK,AAAC;AAC9B,AAAI,aAAC,AAAM,OAAC,AAAiB,kBAAC,AAAK,AAAC,AACtC;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,gBAAI,AAAC;AACH,sBAAM,AAAI,OAAG,MAAM,AAAI,MAAC,AAAM,OAAC,AAAU,WAAC,AAAS,AAAC;AACpD,sBAAM,AAAe,kBAAG,AAAkB,gDAAC,AAAqB,AAAE,AAAC;AACnE,sBAAM,AAAK,QAAG,MAAM,AAAI,MAAC,AAAM,OAAC,AAAe,gBAAC,AAAI,KAAC,AAAI,AAAC;AAC1D,sBAAM,AAAW,oBAAS,AAAI;AAAC,AAAE,AAAC,AAAE,2BAAC,AAAE,GAAC,AAAI,KAAC,AAAQ,AAAC,aAAI,AAAe,eAAE,AAAC,OAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,AAAC,aAAI,AAAe,eAAE,AAAC,AAAC;iBAApG,AAAK;AACzB,AAAE,AAAC,oBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAwC;AACxC,0BAAM,IAAI,AAAK,AAAC,mCAA6B,AAAe,4CAA6B,AAAG;AAAC,AAAE,AAAC,AAAE,+BAAC,AAAI,KAAC,AAAS,UAAC,AAAE,IAAE,AAAI,MAAE,AAAC,AAAC,AAAC;qBAA5C,AAAK,EAAwC,AAAI,KAAC,AAAK,AAAC,MAAE,AAAC,AAChJ;AAAC;AAED,sBAAM,AAAc,iBAAG,AAAI,AAAG,AAAC,wDAA0B,AAAI,MAAC,AAAM,OAAC,AAAK,SAAI,AAAI,MAAC,AAAM,OAAC,AAAI,QAAI,AAAW,YAAC,AAAI,IAAE,AAAC;AACrH,AAAM,uBAAC,AAAe,sDAAC,MAAM,AAAI,MAAC,AAAW,YAAC,AAAc,AAAC,kBAAE,AAAe,iBAAE,AAAc,AAAC,AACjG;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAY,gBAAI,AAAC,KAAI,AAAC,EAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC9C,0BAAM,IAAI,AAAK,AAAC,wIAAkI,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC3K;AAAC;AACD,sBAAM,AAAC,AACT;AAAC,AACH;;AAAC;AAED,AAAY,iBAAC,AAAsB;AACjC,AAAM,eAAC,AAAY,kDAAC,AAAU,YAAE,AAAI,KAAC,AAAO,AAAC,AAC/C;AAAC,AACF","sourcesContent":["import { BintrayOptions, CancellationToken, HttpExecutor, UpdateInfo } from \"builder-util-runtime\"\nimport { BintrayClient } from \"builder-util-runtime/out/bintray\"\nimport { URL } from \"url\"\nimport { getChannelFilename, getDefaultChannelName, newBaseUrl, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport class BintrayProvider extends Provider<UpdateInfo> {\n  private client: BintrayClient\n  private readonly baseUrl: URL\n\n  constructor(configuration: BintrayOptions, httpExecutor: HttpExecutor<any>) {\n    super(httpExecutor)\n\n    this.client = new BintrayClient(configuration, httpExecutor, new CancellationToken())\n    this.baseUrl = newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)\n  }\n\n  setRequestHeaders(value: any): void {\n    super.setRequestHeaders(value)\n    this.client.setRequestHeaders(value)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      const channelFilename = getChannelFilename(getDefaultChannelName())\n      const files = await this.client.getVersionFiles(data.name)\n      const channelFile = files.find(it => it.name.endsWith(`_${channelFilename}`) || it.name.endsWith(`-${channelFilename}`))\n      if (channelFile == null) {\n        // noinspection ExceptionCaughtLocallyJS\n        throw new Error(`Cannot find channel file \"${channelFilename}\", existing files:\\n${files.map(it => JSON.stringify(it, null, 2)).join(\",\\n\")}`)\n      }\n\n      const channelFileUrl = new URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${channelFile.name}`)\n      return parseUpdateInfo(await this.httpRequest(channelFileUrl), channelFilename, channelFileUrl)\n    }\n    catch (e) {\n      if (\"statusCode\" in e && e.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"]}
