{"version":3,"file":"GitHubProvider.js","sourceRoot":"","sources":["../src/GitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, githubUrl, HttpError, HttpExecutor, parseXml, ReleaseNoteInfo, UpdateInfo, XElement } from \"builder-util-runtime\"\nimport * as semver from \"semver\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { getChannelFilename, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: URL\n\n  constructor(protected readonly options: GithubOptions, defaultHost: string, executor: HttpExecutor<any>) {\n    super(executor, false /* because GitHib uses S3 */)\n\n    this.baseUrl = newBaseUrl(githubUrl(options, defaultHost))\n  }\n\n  protected computeGithubBasePath(result: string) {\n    // https://github.com/electron-userland/electron-builder/issues/1903#issuecomment-320881211\n    const host = this.options.host\n    return host != null && host !== \"github.com\" && host !== \"api.github.com\" ? `/api/v3${result}` : result\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions, private readonly updater: AppUpdater, executor: HttpExecutor<any>) {\n    super(options, \"github.com\", executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n\n    const feedXml: string = (await this.httpRequest(newUrlFromBase(`${basePath}.atom`, this.baseUrl), {\n      Accept: \"application/xml, application/atom+xml, text/xml, */*\",\n    }, cancellationToken))!\n\n    const feed = parseXml(feedXml)\n    const latestRelease = feed.element(\"entry\", false, `No published versions on GitHub`)\n    let version: string | null\n    try {\n      if (this.updater.allowPrerelease) {\n        version = latestRelease.element(\"link\").attribute(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)!![1]\n      }\n      else {\n        version = await this.getLatestVersionString(basePath, cancellationToken)\n      }\n    }\n    catch (e) {\n      throw new Error(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`)\n    }\n\n    if (version == null) {\n      throw new Error(`No published versions on GitHub`)\n    }\n\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const channelFileUrl = newUrlFromBase(this.getBaseDownloadPath(version, channelFile), this.baseUrl)\n    const requestOptions = this.createRequestOptions(channelFileUrl)\n    let rawData: string\n    try {\n      rawData = (await this.executor.request(requestOptions, cancellationToken))!!\n    }\n    catch (e) {\n      if (!this.updater.allowPrerelease && e instanceof HttpError && e.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    const result = parseUpdateInfo(rawData, channelFile, channelFileUrl)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = `${githubUrl(this.options)}/${requestOptions.path}`\n    }\n\n    if (result.releaseName == null) {\n      result.releaseName = latestRelease.elementValueOrEmpty(\"title\")\n    }\n\n    if (result.releaseNotes == null) {\n      result.releaseNotes = computeReleaseNotes(this.updater.currentVersion, this.updater.fullChangelog, feed, latestRelease)\n    }\n    return result\n  }\n\n  private async getLatestVersionString(basePath: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const url = newUrlFromBase(`${basePath}/latest`, this.baseUrl)\n    try {\n      // do not use API to avoid limit\n      const rawData = await this.httpRequest(url, {Accept: \"application/json\"}, cancellationToken)\n      if (rawData == null) {\n        return null\n      }\n\n      const releaseInfo: GithubReleaseInfo = JSON.parse(rawData)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return this.computeGithubBasePath(`/${this.options.owner}/${this.options.repo}/releases`)\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    // still replace space to - due to backward compatibility\n    return resolveFiles(updateInfo, this.baseUrl, p => this.getBaseDownloadPath(updateInfo.version, p.replace(/ /g, \"-\")))\n  }\n\n  private getBaseDownloadPath(version: string, fileName: string) {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}\n\nfunction getNoteValue(parent: XElement): string {\n  const result = parent.elementValueOrEmpty(\"content\")\n  // GitHub reports empty notes as <content>No content.</content>\n  return result === \"No content.\" ? \"\" : result\n}\n\nexport function computeReleaseNotes(currentVersion: string, isFullChangelog: boolean, feed: XElement, latestRelease: any) {\n  if (!isFullChangelog) {\n    return getNoteValue(latestRelease)\n  }\n\n  const releaseNotes: Array<ReleaseNoteInfo> = []\n  for (const release of feed.getElements(\"entry\")) {\n    const versionRelease = release.element(\"link\").attribute(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)![1]\n    if (semver.lt(currentVersion, versionRelease)) {\n      releaseNotes.push({\n        version: versionRelease,\n        note: getNoteValue(release)\n      })\n    }\n  }\n  return releaseNotes\n    .sort((a, b) => semver.rcompare(a.version, b.version))\n}\n"]}
